services:

    database:
        image: postgres:17-alpine
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            TZ: Europe/Paris
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            retries: 5
            interval: 3s
            timeout: 30s

    api:
        build:
            context: ./api
            dockerfile: Dockerfile
        cap_drop:
            -   ALL # Supprime toutes les capacités Linux non nécessaires
        security_opt:
            -   no-new-privileges  # Empêche l’application d’obtenir plus de permissions après démarrage
        depends_on:
            database:
                condition: service_healthy
        restart: unless-stopped
        env_file: .env
        networks:
            - frontend
            - backend
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${POSTGRES_DB}
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
            SPRING_PROFILES_ACTIVE: prod
            TZ: Europe/Paris

# ! La configuration pour le client n'est pas fonctionnelle en l'état
    client:
        build:
            context: ./client
            dockerfile: Dockerfile
        security_opt:
            - no-new-privileges
        tmpfs:
            - /tmp # Montage en mémoire pour les fichiers temporaires
            - /var/cache/nginx # Cache Nginx en mémoire pour accélérer les requêtes et éviter une persistance inutile
        depends_on:
            -   api
        restart: unless-stopped
        networks:
            - frontend
        ports:
            - "80:80"
            - "443:443"


networks:
    frontend:
    backend:

volumes:
    postgres_data: